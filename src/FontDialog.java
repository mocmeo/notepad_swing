import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;

public class FontDialog extends javax.swing.JDialog {
    
    // the listModel (the data source) that sticks to the JList (the view)
    // we do not add new elements directly to JList, but to listModel
    // we declare MainWindow here to reference back to the parent frame (FontDialog: child, MainWindow: parent)
    DefaultListModel<String> fontnames = new DefaultListModel();
    DefaultListModel<String> fontsizes = new DefaultListModel();
    DefaultListModel<String> fontstyles = new DefaultListModel();
    MainWindow window;
    
    // supportive function
    public static String scriptToText(String script) {
        switch (script) {
            case "Western": return ("AaBbYyZz");
            case "Greek":   return ("AaBbΑαΒβ");
            case "Turkish": return ("AaBbĞğŞş");
            case "Baltic":  return ("AaBbYyZz");
            case "Central European": return ("AaBbÁáÔô");
            case "Cyrillic": return ("AaBbБбФф");
            case "Vietnamese": return ("AaBbƠơƯư");
        }
        return ("AaBbYyZz");
    }

    public FontDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        window = (MainWindow)parent;
        JTextArea currentText = window.getTextArea();

        // Sets the model that represents the contents or "value" of the list, 
        // notifies property change listeners, and then clears the list's selection.
        fontnameList.setModel(fontnames);
        fontsizeList.setModel(fontsizes);
        fontstyleList.setModel(fontstyles);
        
        // set the converted text from scriptList (Western, Greek, ...)
        // set sampleText's font corresponding to the text on the textArea
        sampleText.setText(scriptToText(scriptList.getSelectedItem().toString()));
        sampleText.setFont(currentText.getFont());
        
        
        // get all available fonts 
        // add font families and font sizes to the view
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontFamilies = ge.getAvailableFontFamilyNames();
        for (String font : fontFamilies) {
            fontnames.addElement(font);
        }
        for (int i = 1; i <= 70; i++) {
            fontsizes.addElement(i + "");
        }

        // add font style to the view
        fontstyles.addElement("Regular");
        fontstyles.addElement("Italic");
        fontstyles.addElement("Bold");
        fontstyles.addElement("Bold Italic");
        String[] fontStyleArray = {"Regular", "Italic", "Bold", "Bold Italic"};
        
        // apply rendered text on each element of the list
        fontnameList.setCellRenderer(new FontNameRenderer());
        fontstyleList.setCellRenderer(new FontStyleRenderer());
        
        // a little decoration for showMoreFonts
        showMore.setText("<html><a href=\"\"><u>Show more fonts:</u></a></html>");
        showMore.setForeground(Color.blue);
        
        
        // Initial font settings:
        // font traversal flow (textArea -> sampleText -> fontField)
        String init_fontname = sampleText.getFont().getFontName();
        String init_fontstyle = fontStyleArray[sampleText.getFont().getStyle()];
        String init_fontsize = sampleText.getFont().getSize() + "";
        
        fontnameField.setText(init_fontname);
        fontstyleField.setText(init_fontstyle);
        fontsizeField.setText(init_fontsize);
        
        
        // initial focus on the selected element of each list
        fontnameList.setSelectedValue(init_fontname, true);
        fontstyleList.setSelectedValue(init_fontstyle, true);
        fontsizeList.setSelectedValue(init_fontsize, true);
        
        setTitle("Font");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fontnameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        fontnameList = new javax.swing.JList<>();
        fontstyleField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        fontstyleList = new javax.swing.JList<>();
        fontsizeField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        fontsizeList = new javax.swing.JList<>();
        samplePanel = new javax.swing.JPanel();
        sampleText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        scriptList = new javax.swing.JComboBox<>();
        showMore = new javax.swing.JLabel();
        okFontButton = new javax.swing.JButton();
        cancelFontButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Font:");

        jLabel2.setText("Font style:");

        jLabel3.setText("Size:");

        fontnameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontnameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontnameListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fontnameList);

        fontstyleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontstyleList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontstyleListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(fontstyleList);

        fontsizeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fontsizeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fontsizeListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(fontsizeList);

        samplePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sample"));

        sampleText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sampleText.setText("AaBbYyZz");

        javax.swing.GroupLayout samplePanelLayout = new javax.swing.GroupLayout(samplePanel);
        samplePanel.setLayout(samplePanelLayout);
        samplePanelLayout.setHorizontalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sampleText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        samplePanelLayout.setVerticalGroup(
            samplePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sampleText, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );

        jLabel4.setText("Script:");

        scriptList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Western", "Greek", "Turkish", "Baltic", "Central European", "Cyrillic", "Vietnamese" }));
        scriptList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scriptListItemStateChanged(evt);
            }
        });

        showMore.setText("Show more fonts:");

        okFontButton.setText("OK");
        okFontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okFontButtonActionPerformed(evt);
            }
        });

        cancelFontButton.setText("Cancel");
        cancelFontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelFontButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okFontButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelFontButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fontnameField, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(samplePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(fontstyleField)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(57, 57, 57)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(fontsizeField, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))))
                        .addComponent(showMore)
                        .addComponent(scriptList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontstyleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontsizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(samplePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scriptList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(showMore)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okFontButton)
                    .addComponent(cancelFontButton))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelFontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelFontButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelFontButtonActionPerformed

    private void fontnameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontnameListValueChanged
        String fontname = fontnameList.getSelectedValue();
        int fontstyle = sampleText.getFont().getStyle();
        int fontsize = sampleText.getFont().getSize();
        
        sampleText.setFont(new Font(fontname, fontstyle, fontsize));
        fontnameField.setText(fontname);
    }//GEN-LAST:event_fontnameListValueChanged

    private void fontstyleListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontstyleListValueChanged
        String fontStyle = fontstyleList.getSelectedValue();
        int newFontStyle = 0;
        
        switch (fontStyle) {
            case "Regular": {
                newFontStyle = Font.PLAIN;
                break;
            }
            case "Italic": {
                newFontStyle = Font.ITALIC;
                break;
            }
            case "Bold": {
                newFontStyle = Font.BOLD;
                break;
            }
            case "Bold Italic": {
                newFontStyle = Font.BOLD + Font.ITALIC;
                break;
            }
        }
        sampleText.setFont(sampleText.getFont().deriveFont(newFontStyle));
        fontstyleField.setText(fontStyle);
    }//GEN-LAST:event_fontstyleListValueChanged

    private void fontsizeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fontsizeListValueChanged
        // derive font size must be float type (format: 10f, 20f...)
        int fontSize = Integer.parseInt(fontsizeList.getSelectedValue());
        sampleText.setFont(sampleText.getFont().deriveFont((float)fontSize));
        fontsizeField.setText(fontSize +"");
    }//GEN-LAST:event_fontsizeListValueChanged

    private void scriptListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scriptListItemStateChanged
        // reuse oldFont for new script
        Font oldFont = sampleText.getFont();
        sampleText.setText(scriptToText(scriptList.getSelectedItem().toString()));
        sampleText.setFont(oldFont);
    }//GEN-LAST:event_scriptListItemStateChanged

    private void okFontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okFontButtonActionPerformed
        JTextArea currentText = window.getTextArea();
        currentText.setFont(sampleText.getFont());
        dispose();
    }//GEN-LAST:event_okFontButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FontDialog dialog = new FontDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelFontButton;
    private javax.swing.JTextField fontnameField;
    private javax.swing.JList<String> fontnameList;
    private javax.swing.JTextField fontsizeField;
    private javax.swing.JList<String> fontsizeList;
    private javax.swing.JTextField fontstyleField;
    private javax.swing.JList<String> fontstyleList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton okFontButton;
    private javax.swing.JPanel samplePanel;
    private javax.swing.JLabel sampleText;
    private javax.swing.JComboBox<String> scriptList;
    private javax.swing.JLabel showMore;
    // End of variables declaration//GEN-END:variables
}
